{% set dbname = name %}
{% set config_dir = "%s/conf" % install_dir %}
{% set app_config = "%s/application_%s.conf" % (config_dir, mode) %}
{% set logger_config = "%s/application-logger-%s.xml" % (config_dir, mode) %}
{% set pid_file = "%s/%s.pid" % (pid_dir, name) %}

#! /bin/sh
### BEGIN INIT INFO
# Provides:          {{name}}
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: {{name}} initscript
# Description:       This file handles starting and stopping of {{name}}
### END INIT INFO

# Author: Thomas Werkmeister <thomas@scm.io>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC={{name}}
NAME={{name}}
INSTALL_DIR={{install_dir}}
DAEMON=${INSTALL_DIR}/bin/{{project}}
DAEMON_ARGS="-Dconfig.file={{app_config}} -Dhttp.port={{port}} -Dmongodb.db={{dbname}} -Dapplication.fullname={{name}} -Dapplication.name={{project}} -Dapplication.branch={{branch}} -Dlogger.file={{logger_config}} -Dapplication.logDir={{log_dir}} -Dpidfile.path={{pid_file}}"
PIDFILE={{pid_file}}
SCRIPTNAME=/etc/init.d/{{name}}
DAEMON_USER={{name}}

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started
  start-stop-daemon -c $DAEMON_USER --start --quiet --pidfile $PIDFILE --user $DAEMON_USER --exec ${DAEMON} --test > /dev/null \
    || return 1
  start-stop-daemon -d $INSTALL_DIR --background -c $DAEMON_USER --start --quiet --pidfile $PIDFILE --user $DAEMON_USER --exec ${DAEMON} -- \
    $DAEMON_ARGS \
    || return 2
  # Add code here, if necessary, that waits for the process to be ready
  # to handle requests from services started subsequently which depend
  # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon -c $DAEMON_USER --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --user $DAEMON_USER
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  # Wait for children to finish too if this is a daemon that forks
  # and if the daemon is only ever run from this initscript.
  # If the above conditions are not satisfied then add some other code
  # that waits for the process to drop all resources that could be
  # needed by services started subsequently.  A last resort is to
  # sleep for some time.
  start-stop-daemon -c $DAEMON_USER --stop --quiet --oknodo --retry=0/30/KILL/5 --user $DAEMON_USER
  [ "$?" = 2 ] && return 2
  # Many daemons don't delete their pidfiles when they exit.
  rm -f $PIDFILE
  return "$RETVAL"
}

case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  status)
       status_of_proc "-p $PIDFILE" "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart)
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
      # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
  echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
  exit 3
  ;;
esac

:
